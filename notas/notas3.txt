Blocks, procs y lambdas
Algunas características de los bloques en Ruby:
También llamados funciones sin nombre.
Van entre llaves {} o entre do…end.
Depende de un método asociado para funcionar.
Algunas características de Yield:
Ejecuta un bloque pasado como parámetro.
Es un patrón frecuente en Ruby.
Algunas características de los procs y lambdas:
Son métodos sin nombre.
Se pueden asignar a una variable.
Se tienen qué llamar (.call) para que se puedan ejecutar.
Lambdas es un método que está heredando todos los métodos que tiene procs.

#como leer archivos en ruby?
con la clase File y el metodo open podemos abrir un archivo existente y si no existe se crea automaticamente

file = File.open(nombre_del_archivo, metodo_a_utilizar)

w: write
r: read

file.puts | write: funciona para escribir en un archivo.

file.close: para salir de la edición del archivo.

file.read: ver el contenido del archivo

File.open(nombre_del_archivo).readlines.each : itera sobre cada linea que tiene el archivo, es decir convierte cada linea en una cadena de texto y guardarlo en un array

Manejo de excepciones
El manejo de excepciones nos sirve para controlar los errores que Ruby nos arroja por defecto cuando ejecutamos un código.
Existen cierto tipo de palabras reservadas para este manejo de excepciones:
begin, end: Para definir un bloque.
rescue: Para controlar una excepción.
else: Código que se ejecuta si no hubo excepciones.
ensure: Para forzar que se ejecute código si se lanza o no una excepción.
raise o fail: Para lanzar una excepción.

Objetos en Ruby:
Ruby es un lenguaje orientado a objetos.
Casi todo en Ruby es un objeto.
Los objetos tienen datos (atributos)y comportamiento (métodos).
Los objetos colaboran con otros objetos.
La clases son las definiciones de los objetos, estas son algunas características:
Contenedor que tiene propiedades tales como métodos y variables.
Pueden heredar propiedades.
Permite herencia simple.

Características de las variables locales:
Se usan a nivel de los métodos o bloques. Esto quiere decir que su tiempo de vida es solo dentro de un método o solo dentro de un bloque.
Deberían comenzar con minúscula o con _.
Siempre vamos a saber exactamente hasta dónde vive una variable local.
Características de las variables de instancia:
Solo va a tener un valor dentro de un objeto, es decir que su tiempo de vida es solo dentro de un objeto.
Solo cobra vida cuando vamos a iniciar una clase.
Todas las variables de instancia inician con un solo @
Características de las variables de clase:
Inician con dos @
Se considera una variable que pueda ser declarada apenas inicie la clase sin necesidad de de llamarla a través de métodos o de inicializarla a través de métodos.
Características de las variables globales:
Se usan a nivel de todo el programa.
Deberían iniciar con $.
¿Qué son las constantes?
Tienen el mismo alcance que una variable, de acuerdo al lugar donde son declaradas.
Inician con una letra mayúscula o pueden ser todas mayúsculas.
No deberían cambiar su valor.