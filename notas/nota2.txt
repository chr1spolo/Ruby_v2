Los arreglos son un conjunto de variables que vamos a definir en una sola.
Los arreglos en Ruby no necesariamente pueden ser de la misma clase, es decir, podemos construir un arreglo con números, cadenas, arreglos dentro de un arreglo o flotantes y eso en Ruby no afectaría o haría ningún cambio.
Ejemplos de arreglos en Ruby:
array = Array.new : crea un nuevo array totalmente vacio.
array = Array.new(cantidad_de_valores) : crea un nuevo array con x posiciones pero con un valor nulo.
array = Array.new (cantidad_de_valores, valor_por_defect): crea un nuevo array con x posiciones pero con un valor por defecto asignado.
array = Array(1…5): define una variable pero utilizando un rango, en este caso desde 1 hasta 5, creando esas posiciones con dichos valores.
array = [1,2,3] : es la forma más comun de instanciar la clase array, con corchetes se crea
array.push(4)
array << 5
array.unshift(0)
array.insert(3, ´nuevo´)
Eliminar elementos de arreglos en Ruby:
array = [1,2,3,4,5,6,7]
- array.pop: Elimina el último elemento del arreglo.
- array.shift: Elimina el primer elemento del arreglo.
- arra.delete_at(posición del elemento): Elimina un elemento dentro del arreglo.
- array.delete(elemento): Elimina un elemento en específico del arreglo.
- array.uniq: Elimina los elementos repetidos del arreglo.
- array.uniq!: Para que el cambio que hacemos con array.uniq permanezca.

La estructuras repetitivas las utilizamos para iterar sobre un arreglo para obtener cierto tipo de información o manejar de alguna forma los datos que tenemos guardados.
Existen 3 métodos con los cuales podemos iterar sobre un arreglo:
- Método each: Vamos a invocar este método para poder ver cada uno de los elementos e ir asignando el valor que corresponde a cada espacio del arreglo.
- Método for: Hace la misma función que each.
- Método while: Nos ayuda a determinar el tamaño total de nuestro arreglo.
Nota: El método each es el más utilizado en la comunidad