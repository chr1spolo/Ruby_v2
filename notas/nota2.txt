Los arreglos son un conjunto de variables que vamos a definir en una sola.
Los arreglos en Ruby no necesariamente pueden ser de la misma clase, es decir, podemos construir un arreglo con números, cadenas, arreglos dentro de un arreglo o flotantes y eso en Ruby no afectaría o haría ningún cambio.
Ejemplos de arreglos en Ruby:
array = Array.new : crea un nuevo array totalmente vacio.
array = Array.new(cantidad_de_valores) : crea un nuevo array con x posiciones pero con un valor nulo.
array = Array.new (cantidad_de_valores, valor_por_defect): crea un nuevo array con x posiciones pero con un valor por defecto asignado.
array = Array(1…5): define una variable pero utilizando un rango, en este caso desde 1 hasta 5, creando esas posiciones con dichos valores.
array = [1,2,3] : es la forma más comun de instanciar la clase array, con corchetes se crea
array.push(4)
array << 5
array.unshift(0)
array.insert(3, ´nuevo´)
Eliminar elementos de arreglos en Ruby:
array = [1,2,3,4,5,6,7]
- array.pop: Elimina el último elemento del arreglo.
- array.shift: Elimina el primer elemento del arreglo.
- arra.delete_at(posición del elemento): Elimina un elemento dentro del arreglo.
- array.delete(elemento): Elimina un elemento en específico del arreglo.
- array.uniq: Elimina los elementos repetidos del arreglo.
- array.uniq!: Para que el cambio que hacemos con array.uniq permanezca.

La estructuras repetitivas las utilizamos para iterar sobre un arreglo para obtener cierto tipo de información o manejar de alguna forma los datos que tenemos guardados.
Existen 3 métodos con los cuales podemos iterar sobre un arreglo:
- Método each: Vamos a invocar este método para poder ver cada uno de los elementos e ir asignando el valor que corresponde a cada espacio del arreglo.
- Método for: Hace la misma función que each.
- Método while: Nos ayuda a determinar el tamaño total de nuestro arreglo.
Nota: El método each es el más utilizado en la comunidad

Argumentos y valores de retorno
Para tomar en cuenta:
Todos los métodos tienen valores de retorno.
No es obligatorio usar la palabra return para tomar algún valor.

Existen los metodos:
-Sin argumentos
-Con argumentos
-Con argumentos con un valor por defecto
-Con hash como argumento

¿Que es un hash?
Un hash vendría siendo un diccionario, tiene la misma definicion que un array lo unico es que cada espacio no va a tener un indice, si no que se diferencia con una key(clave)

Lista de métodos de arreglos en Ruby:
include: Busca dentro del arreglo si existe o no el elemento que le preguntemos.
map (map!): Funciona como each, pero adicional se puede editar o sobre escribir el valor de nuestro arreglo. Para que los cambios en el arreglo permanezcan, escribimos un signo de exclamación después del método.
map &:even?: Even funciona en Ruby para indicarnos si el número es par o es impar. Al utilizarlo en el método map, nos va a ayudar a saber el estado de cada uno de los elementos que componen el arreglo.
reduce
select: Realiza una consulta entre cada uno de los elementos del arreglo y selecciona según la indicación que le demos.
reject: Rechaza a todos los elementos del arreglo según la indicación que le demos.
drop_while: Funciona como el método reject.
delete_if: Este método también funciona similar al reject.
keep_if: Funciona similar al método select.
any?: Nos ayuda a saber si alguno de los elementos del arreglo cumple con la condición que le establezcamos.
all?: Nos ayuda a saber si todos los elementos del arreglo cumplen con la condición que le establezcamos.
& (intersección): Nos ayuda a crear una intersección diciéndonos qué elementos tenemos en común entre diferentes arreglos.
asterisco (*) (por un entero y por un string): Nos ayuda a multiplicar los elementos del arreglo por el valor que le indiquemos.
suma y resta
collect: Es un alias del método map
each_with_index: Nos va a devolver primero el valor y luego el index que estemos llamando.
flatten!: Nos permite tener un arreglo simple.
Nota: Si colocamos un signo de interrogación después de un método le estamos indicando que queremos que nos devuelva un boleado, pero si colocamos signo de admiración significa que está alterando el valor de la variable que le estemos pasando.
Los hashes son diccionarios que podemos utilizar en Ruby.