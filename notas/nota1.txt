El creador de Ruby es Yukihiro ‚ÄúMatz‚Äù Matsumoto. √âste es un lenguaje de programaci√≥n que fue hecho con la mezcla de otros lenguajes: Perl, Ada, Lisp, Eiffel y Smaltalk.
Todas las partes tomadas de estos lenguajes logran hacer de Ruby un lenguaje de programaci√≥n que incorpora programaci√≥n imperativa y programaci√≥n funcional.

La liberaci√≥n oficial del lenguaje fue en el a√±o 1995 y desde entonces se ha rodeado de una gran comunidad que ha ido haciendo crecer las librer√≠as, llamadas gemas, ya que este lenguaje es completamente gratis no solamente al usarlo, sino tambi√©n en su distribuci√≥n, puedes copiarlo y usarlo libremente.

Estos son algunos aspectos relevantes de este lenguaje:

Ruby es un lenguaje de programaci√≥n orientado a objetos. Todo es un objeto. Existen muchos lenguajes en los que los n√∫meros por ejemplo, no pueden ser objetos, en Ruby lo son.

Influenciado por el lenguaje de programaci√≥n Smaltalk, Ruby permite que se le puedan colocar variables de instancia a todos los tipos de datos que tiene, incluidos los n√∫meros.

Todas las partes m√°s importantes de Ruby pueden ser modificadas y redefinidas libremente. Es un lenguaje muy flexible.

Tiene un f√°cil manejos de errores con su famoso manejo de excepciones, similar a Java y Python.

Se puede utilizar Ruby desde C con mucha facilidad y de forma simple.

Ruby es utilizado mayormente en GNU/Linux, pero es completamente posible que corra en UNIX, Mac OS, Windows.

Los bloques en Ruby est√°n inspirados en lenguajes de programaci√≥n funcionales, especialmente en Lisp. No es necesario crear un m√©todo para cada iteraci√≥n, con los bloques, un m√©todo puede hacer el n√∫mero de iteraciones que necesites.

En Ruby no es necesario declarar variables, existen convenciones simples para determinar el alcance de las variables:

var puede ser una variable local.
@var es una variable de instancia.
$var es una variable global.
Ahora que ya sabes de d√≥nde viene Ruby y cu√°les son algunos de los aspectos m√°s relevantes, puedes comenzar el curso y contarnos m√°s de los proyectos en los que tienes pensado usar este lenguaje de programaci√≥n.

D√©janos tambi√©n a lo largo del curso, en el sistema de discusiones, qu√© temas te gustar√≠a que profundizaramos m√°s.

Caracter√≠sticas de Ruby:
Casi todo en Ruby est√° orientado a objetos.
Es un lenguaje interpretado, lo que significa que no necesitas un compilador externo para poder ejecutar el lenguaje.
Es din√°micamente tipado, lo que significa que no necesitamos definir cierto tipo de variables, sino que el lenguaje lo va a interpretar por nosotros.
Es muy expresivo. Es muy parecido al lenguaje humano lo que lo hace muy f√°cil de leer.
Este lenguaje nombra a sus librer√≠as ‚ÄúGemas‚Äù.
Tiene muchos frameworks para hacer aplicaciones web.
Este lenguaje se caracteriza por su comunidad grande.

Todos los archivos deben guardarse con la extensi√≥n .rb
Para comentar el c√≥digo en Ruby, se debe poner numeral (#) y con esto no afectamos la ejecuci√≥n de c√≥digo.

Operaciones y variables
Matem√°ticas en Ruby
Desde la consola podemos utilizar Ruby como una calculadora, ya que podemos realizar operaciones simples y nos devolver√° un resultado.
En el caso de las divisiones, el resultado que nos va a arrojar siempre va a ser un n√∫mero entero sin importar si el n√∫mero debiera salir con decimal. Para poder obtener n√∫meros decimales en la respuesta simplemente debemos convertir uno de los n√∫meros de la operaci√≥n en un n√∫mero decimal.
Para realizar operaciones en las que deseamos saber el residuo, el s√≠mbolo que debemos utilizar es %.
Para hacer operaciones de potencias debemos colocar ** seguido de la potencia.
Los operadores matem√°ticos son los que nos van a retornar un n√∫mero o un n√∫mero decimal en el caso de la divisi√≥n.
Los operadores booleanos son aquellos que nos van a retornar solo valores booleanos. Estos operadores se dividen en dos:
a) Comparativos. Comparan dos n√∫meros o dos palabras.
b) L√≥gicos. Necesitan valores booleanos para poder ser comparados.
Otros datos de Ruby
Algo adicional con lo que cuenta Ruby es que sin necesidad de importar m√≥dulos adicionales, es decir, una librer√≠a adicional, podr√≠amos llamarla.
¬øQu√© es un m√≥dulo? Un m√≥dulo para Ruby es c√≥mo podr√≠amos reunir un conjunto de funciones que van a tener un mismo fin.
¬øPara qu√© sirven las comillas dobles en los puts de Ruby? Podemos inyectar c√≥digo Ruby dentro de una cadena.

Small note

\n & \t no funcionan con comillas simples üòÉ
puts ‚Äòprimera linea\nsegundalinea‚Äô #doesn‚Äôt work
puts ‚Äò\ttab‚Äô	#doesn‚Äôt work
puts ‚Äúprimera linea\nsegundalinea‚Äù	#works well
puts ‚Äú\ttab‚Äù	#works well

Estructuras selectivas
Las estructuras selectivas son esos fragmentos de c√≥digo en los que se eval√∫a una condici√≥n y seg√∫n el resultado es que podemos tomar la decisi√≥n de qu√© camino tomar.
If, elsif, else = Lo que hacen es preguntar si una condici√≥n se cumple para ejecutar el c√≥digo en funci√≥n de esa condici√≥n.
case, when, else = Tomamos una variable con distintos casos con los cuales queremos que se compare.

Definici√≥n e invocaci√≥n de m√©todos
M√©todo = Es una secci√≥n de c√≥digo que podemos reutilizar y a la cual vamos a poder nombrar. Este bloque de c√≥digo debe ser escrito para una tarea en espec√≠fico en el programa.
La raz√≥n por la que nosotros debemos separar nuestro programa en m√©todos es porque si algo sale mal es mucho m√°s f√°cil reconocer en qu√© m√©todo o en qu√© bloque de c√≥digo en espec√≠fico existe el problema. Adem√°s de que tambi√©n nos permite reutilizar y no hacer tanto c√≥digo espagueti en nuestro programa.
Los m√©todos se definen en tres partes:
- El encabezado o cabecera: Consta de la palabra reservada ‚Äúdef‚Äù seguida por el nombre del m√©todo que necesitemos y una parte que es opcional son los argumentos que nosotros le podr√≠amos poner.
- El cuerpo: Es la parte en la que va el c√≥digo que debemos ejecutar.
- El fin: Ser√≠a la palabra reservada ‚Äúend‚Äù
